# app/models/schemas.py
from pydantic import BaseModel, Field
from typing import List, Optional, Any
from datetime import datetime

# --- Request / Response schemas ---
class Message(BaseModel):
    role: str
    content: str

class GenerateBlogRequest(BaseModel):
    user_id: str
    model: str = "gpt-4o-mini"
    prompt: str = Field(..., description="Topic for blog posts")
    max_tokens: int = 1000
    temperature: float = 0.7

class GenerateSocialRequest(BaseModel):
    user_id: str
    prompt: str = Field(..., description="Topic for social posts")
    model: str = "gpt-4o-mini"
    max_tokens: int = 500
    temperature: float = 0.7

class GenerateResponse(BaseModel):
    text: str
    markdown: Optional[str]
    metadata: Optional[dict]

class MemorySaveRequest(BaseModel):
    id: Optional[str] = Field(None, description="Optional id; will be autogenerated if not provided")
    content: str
    content_type: Optional[str] = Field("article", description="article | social | conversation")
    metadata: Optional[dict] = None
    embed: Optional[List[float]] = Field(None, description="Optional embedding vector (if precomputed)")

class MemoryQueryRequest(BaseModel):
    query: str
    top_k: int = Field(5, description="Number of results to return")

class MemoryQueryResult(BaseModel):
    id: str
    content: str
    distance: Optional[float]
    metadata: Optional[dict]

class MemoryQueryResponse(BaseModel):
    results: List[MemoryQueryResult]
